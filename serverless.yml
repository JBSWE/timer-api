org: jackburke
app: timer-api
service: timer-api
frameworkVersion: '3.21.0'

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-sqs

package:
  exclude:
    - ".*/**"
    - "src/**"
    - "**/*.zip"
  include:
    - "dist/**"
    - "config/**"

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  lambdaHashingVersion: '20201221'
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    SQS_URL: { Ref: TimerCommandQueue }
    IS_OFFLINE: false
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - Fn::GetAtt: [ TimerCommandQueue, Arn ]
custom:
  stage: ${self:custom.serverless-offline.region}
  dotenv:
    path: ./config/
    logging: false

  dynamodb:
    stages:
      - development
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

  serverless-offline:
    region: localhost

  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://localhost:9324
    region: ${self:custom.serverless-offline.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

functions:
  getTimer:
    handler: dist/handlers/httpHandler.getTimer
    events:
      - httpApi:
          path: /timers/{id}
          method: get

  postTimer:
    handler: dist/handlers/httpHandler.postTimer
    events:
      - httpApi:
          path: /timer
          method: post

  processCommand:
    handler: dist/handlers/commandHandler.processCommand
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TimerCommandQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    TimerCommandQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-command-queue-${sls:stage}
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - TimerCommandDeadLetterQueue
              - Arn
          maxReceiveCount: 5

    TimerCommandDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-command-${sls:stage}-deadletter
